/**
*   FILE : CRTest/src/NeutronGenerator.cc
*   Brief: Implementation of class NeutronGenerator
*/

#include "NeutronGenerator.hh"

#include "G4ParticleDefinition.hh"
#include "G4ParticleTable.hh"
#include "G4SystemOfUnits.hh"

#include "TMath.h"
#include "TF1.h"
#include "TGraph.h"

NeutronGenerator::NeutronGenerator() : Generator(), fTheta(0.)
{
    // Initilized muon spectrum function
    auto pNeutron = G4ParticleTable::GetParticleTable()->FindParticle("neutron");
    fParticleGun->SetParticleDefinition(pNeutron);
    assert(pNeutron != NULL);

    fEmin = 0 * MeV; // GeV - [TODO] change to G4SystemOfUnits?
    fEmax = 10 * MeV;

    fNeuEne = new TF1("fNeuEne", NeutronGenerator::NeutronSpectrum, 0, 10 * CLHEP::MeV, 0);
}

NeutronGenerator::~NeutronGenerator()
{
}

void NeutronGenerator::GeneratePosition()
{

    G4ThreeVector position = GetWorldBoundary();
    position.setX(position.x() * (1 - 2 * G4UniformRand()));
    position.setY(position.y() * (1 - 2 * G4UniformRand()));
    position.setZ(-position.z());

    if (fTriggerMode)
    {
        position.setX(fXmin + (fXmax - fXmin) * G4UniformRand());
        position.setY(fYmin + (fYmax - fYmin) * G4UniformRand());
    }

    fParticleGun->SetParticlePosition(position);
}

void NeutronGenerator::GenerateDirection()
{

    // muon momentum direction
    fTheta = this->GetTheta();

    G4double phi = G4UniformRand() * TMath::Pi() * 2.;
    fParticleGun->SetParticleMomentumDirection(G4ThreeVector(
        TMath::Sin(fTheta) * TMath::Cos(phi),
        TMath::Sin(fTheta) * TMath::Sin(phi),
        TMath::Cos(fTheta)));
}

void NeutronGenerator::GenerateKineticEnergy()
{
    // muon kinetic energy
    // fParticleGun->SetParticleEnergy(G4UniformRand() * (fEmax - fEmin) + fEmin);
    fParticleGun->SetParticleEnergy(fNeuEne->GetRandom() * CLHEP::MeV);
}

void NeutronGenerator::GeneratePrimaries(G4Event *anEvent)
{
    Generate();
    if (fTriggerMode)
    {
        G4int count = 1;
        G4ThreeVector boundary = GetWorldBoundary();
        while (!CheckEndpoint(boundary.z()) && count < 1000)
        {
            Generate();
            count++;
        }
        // [TODO] : #ifdef CRTest_VERBOSE/DEBUG
        if (count > 100)
            G4cout << "[+] WARNING - BAD trigger efficiency. "
                   << "Samples : " << count << "- by " << __func__ << G4endl;
    }
    fParticleGun->GeneratePrimaryVertex(anEvent);
}

// Accept-Reject method to sample muon zenith angle
G4double NeutronGenerator::GetTheta()
{
    using namespace TMath;
    // // [TODO] create a general A-R method in class Generator
    // G4double rnd, theta, val;
    // do
    // {
    //   // [TODO] change to CLHEP or G4
    //   theta = G4UniformRand() * TMath::Pi() / 2.;
    // 	// Zenith angular distribution
    //   val = Sin(theta) * Cos(theta) * Cos(theta) * Cos(theta);
    //   rnd = G4UniformRand();
    // } while (rnd > val);

    // Use Inverse function method
    double rnd = G4UniformRand();
    double theta = TMath::ACos(TMath::Power(1 - rnd, 1.0 / 3));
    return theta;
}

G4ThreeVector NeutronGenerator::GetDirection()
{
    // [TODO] create a general method in class Generator
    using namespace TMath;

    G4double theta = this->GetTheta();
    G4double phi = G4UniformRand() * Pi() * 2.;

    return G4ThreeVector(
        Cos(theta) * Cos(phi),
        Cos(theta) * Sin(phi),
        Sin(theta));
}

double NeutronGenerator::ftgx[184] = {0.0, 0.012055455093429, 0.01205545509343, 0.018083182640145, 0.024110910186859, 0.024110910186859, 0.036166365280289, 0.042194092827004, 0.048221820373719, 0.053626342191028, 0.053626342191028, 0.060277275467149, 0.070034020902933, 0.070034020902933, 0.070034020902933, 0.078360458107294, 0.086441699614838, 0.086441699614838, 0.102849378326743, 0.107201601945219, 0.129637008203839, 0.152072414462459, 0.168480093174364, 0.18488777188627, 0.201295450598175, 0.21770312931008, 0.234110808021986, 0.250518486733891, 0.266926165445796, 0.283333844157701, 0.299741522869607, 0.316149201581512, 0.332556880293417, 0.348964559005322, 0.365372237717228, 0.381779916429133, 0.398187595141038, 0.422799113208896, 0.447410631276754, 0.472022149344612, 0.504837506768423, 0.537652864192233, 0.570468221616044, 0.61969125775176, 0.677118133243428, 0.750952687447002, 0.80837956293867, 0.882214117142244, 0.947844831989865, 1.00527170748153, 1.05449474361725, 1.09551394039701, 1.12832929782082, 1.16114465524463, 1.19396001266844, 1.22677537009226, 1.25959072751607, 1.29240608493988, 1.32522144236369, 1.3580367997875, 1.39085215721131, 1.42366751463512, 1.45648287205893, 1.48929822948274, 1.52211358690655, 1.55492894433036, 1.58774430175417, 1.62055965917798, 1.65337501660179, 1.6861903740256, 1.71900573144941, 1.75182108887322, 1.78463644629703, 1.81745180372084, 1.85026716114466, 1.88308251856847, 1.91589787599228, 1.94871323341609, 1.9815285908399, 2.01434394826371, 2.04715930568752, 2.07997466311133, 2.11279002053514, 2.14560537795895, 2.17842073538276, 2.21123609280657, 2.24405145023038, 2.27686680765419, 2.309682165078, 2.34249752250181, 2.37531287992562, 2.40812823734943, 2.44094359477325, 2.47375895219706, 2.50657430962087, 2.53938966704468, 2.57220502446849, 2.6050203818923, 2.63783573931611, 2.67065109673992, 2.70346645416373, 2.73628181158754, 2.76909716901135, 2.80191252643516, 2.83472788385897, 2.86754324128278, 2.90035859870659, 2.9331739561304, 2.97419315291017, 3.02341618904588, 3.0726392251816, 3.11365842196136, 3.15467761874112, 3.20390065487684, 3.25312369101256, 3.30234672714827, 3.35156976328399, 3.4007927994197, 3.45001583555542, 3.50744271104709, 3.56486958653876, 3.62229646203042, 3.67972333752209, 3.73715021301376, 3.80004631474273, 3.868411642709, 3.93404235755662, 3.9969384592856, 4.06530378725187, 4.13093450209949, 4.19656521694711, 4.26219593179473, 4.32782664664235, 4.39345736148997, 4.45908807633759, 4.51651495182926, 4.59034950603284, 4.65598022088046, 4.72161093572808, 4.7872416505757, 4.84466852606737, 4.91850308027094, 5.00327608694912, 5.08257986738999, 5.16188364783087, 5.23298358891579, 5.30955275623802, 5.37518347108564, 5.44081418593326, 5.51191412701818, 5.5775448418658, 5.64317555671343, 5.7060716584424, 5.75529469457811, 5.82912924878169, 5.91937148169716, 6.00140987525669, 6.06977520322296, 6.12446746559598, 6.21470969851146, 6.25572889529122, 6.3459711282067, 6.38699032498646, 6.47723255790194, 6.52645559403766, 6.62490166630909, 6.68232854180076, 6.73899939722725, 6.80530440024111, 6.87101684698767, 6.93188667872212, 7.00227827668291, 7.06790899153053, 7.1253358670222, 7.19107896323086, 7.2875226039783, 7.39602169981917, 7.5286317058469, 7.72151898734177, 7.91440626883665, 8.15551537070525, 8.40867992766727, 8.60156720916215, 8.95117540687161};
double NeutronGenerator::ftgy[184] = {0.0, 0.024809160305344, 0.019465648854962, 0.029770992366412, 0.038931297709924, 0.034351145038168, 0.045038167938931, 0.051908396946565, 0.056870229007634, 0.072903997929875, 0.066670332513909, 0.077862595419847, 0.093682882649761, 0.087449217233795, 0.083293440289818, 0.100381679389313, 0.110825462543667, 0.104591797127701, 0.117059127959633, 0.123292793375598, 0.129396590762065, 0.136279596325527, 0.144591150213482, 0.150824815629448, 0.154850724543925, 0.158876633458403, 0.163032410402381, 0.16679858325786, 0.170954360201837, 0.175110137145814, 0.178876310001294, 0.18147367059128, 0.184071031181265, 0.186668391771251, 0.189265752361237, 0.191863112951223, 0.19420073748221, 0.196798098072196, 0.199395458662181, 0.201992819252167, 0.204849915901152, 0.20692780437314, 0.208875824815629, 0.211083581317117, 0.212728576357442, 0.213421205848105, 0.213161469789106, 0.211862789494113, 0.210044637081123, 0.207707012550136, 0.205369388019149, 0.203551235606159, 0.201733083193169, 0.199785062750679, 0.19783704230819, 0.195759153836201, 0.193681265364213, 0.191603376892224, 0.189265752361237, 0.187057995859749, 0.184590503299262, 0.182252878768275, 0.179915254237288, 0.177317893647302, 0.174850401086816, 0.172382908526329, 0.169785547936344, 0.167188187346358, 0.164720694785871, 0.162123334195886, 0.159655841635399, 0.157058481045413, 0.154461120455428, 0.151863759865442, 0.149266399275456, 0.14666903868547, 0.144071678095485, 0.141474317505499, 0.139006824945012, 0.136409464355027, 0.13394197179454, 0.131344611204554, 0.128877118644068, 0.126409626083581, 0.123942133523095, 0.121604508992108, 0.119137016431621, 0.116669523871135, 0.114461767369647, 0.11212414283866, 0.109786518307672, 0.107708629835684, 0.105371005304697, 0.103163248803209, 0.100955492301721, 0.098877603829732, 0.096799715357744, 0.094721826885755, 0.092643938413766, 0.090566049941778, 0.088618029499288, 0.086670009056799, 0.08472198861431, 0.082773968171821, 0.08095581575883, 0.07913766334584, 0.07731951093285, 0.07563122654936, 0.073423470047872, 0.070826109457886, 0.068488484926899, 0.06641059645491, 0.064332707982922, 0.062081662138267, 0.059917194979946, 0.057839306507957, 0.055761418035968, 0.05368352956398, 0.051778798464657, 0.049527752620003, 0.047276706775348, 0.045371975676025, 0.04338066589037, 0.041216198732048, 0.039398046319058, 0.037579893906068, 0.03550200543408, 0.033683853021089, 0.031865700608099, 0.030307284254108, 0.028748867900117, 0.027320319575624, 0.025761903221633, 0.024333354897141, 0.023164542631647, 0.022082309052486, 0.020697050071161, 0.019658105835166, 0.018619161599172, 0.017580217363178, 0.016801009186182, 0.015762064950188, 0.014636542027861, 0.013684176478199, 0.012731810928538, 0.012039181437875, 0.011173394574546, 0.010653922456549, 0.010134450338552, 0.009441820847889, 0.008922348729892, 0.008402876611895, 0.00796998318023, 0.007710247121232, 0.007190775003235, 0.006671302885237, 0.00615183076724, 0.005805516021909, 0.005632358649243, 0.005112886531246, 0.005112886531246, 0.004593414413249, 0.004593414413249, 0.004073942295252, 0.004073942295252, 0.003554470177254, 0.003554470177254, 0.003053435114504, 0.003053435114504, 0.003034998059257, 0.002862595419847, 0.002450591926511, 0.00251552594126, 0.00251552594126, 0.002290076335878, 0.002290076335878, 0.001908396946565, 0.001717557251908, 0.001526717557252, 0.001335877862595, 0.001145038167939, 0.001145038167939, 0.0, 0.0};
TGraph *NeutronGenerator::ftg = new TGraph(184, ftgx, ftgy);

double NeutronGenerator::NeutronSpectrum(double *x, double *par)
{
    if (x[0] < 0 || x[0] >= 10 * CLHEP::MeV)
    {
        return 0;
    }
    return ftg->Eval(x[0]);
}
